[
  {
    "name": "Admin Full Access",
    "description": "Admin can do all.",
    "target": "subject.isAdmin()",
    "condition": "true"
  },
  {
    "name": "Manage Users",
    "description": "Admin and Manager can manage users.",
    "target": "action == 'MANAGE_USERS'",
    "condition": "subject.isAdmin() OR subject.getRelatedRolesNames().contains('manager')"
  },
  {
    "name": "General permission to execute manager related tasks",
    "description": "General permission to execute manager related tasks",
    "target": "action == 'EXECUTE_MANAGER_TASKS'",
    "condition": "subject.getRelatedRolesNames().contains('manager')"
  },
  {
    "name": "Update information for a user",
    "description": "A manager can update a user if the user is managed by the manager.",
    "target": "action == 'UPDATE_USER'",
    "condition": "subject.managesAnyWorkUnit(resource.getRelatedWorkUnits())"
  },
  {
    "name": "Filter roles",
    "description": "Managers can create new users with equal roles or lower permissions.",
    "target": "action == 'FILTER_ROLE'",
    "condition": "subject.isAdmin() OR (subject.getRelatedRolesNames().contains('manager') AND {'manager', 'general'}.contains(resource.name))"
  },
  {
    "name": "Read Public plans",
    "description": "Permission to read public plans",
    "target": "action == 'READ_PLAN' AND resource.resourcePrivacy.name() == 'PUBLIC'",
    "condition": "true"
  },
  {
    "name": "Read plans in a project of the same consortium",
    "description": "A user can read a plan that belongs to a project related with consortia where the user is a member",
    "target": "action == 'READ_PLAN'",
    "condition": "subject.belongsToConsortia(resource.project.getRelatedConsortia())"
  },
  {
    "name": "Read Plans in the subject's work unit",
    "description": "Permission to read plans in same work unit",
    "target": "action == 'READ_PLAN'",
    "condition": "subject.belongsToAnyWorkUnit(resource.workUnit)"
  },
  {
    "name": "Admin can delete resources",
    "description": "Permission to delete any resource for admins",
    "target": "action == 'DELETE_RESOURCE'",
    "condition": "subject.role.name == 'admin'"
  },
  {
    "name": "Update a plan that is in the same subject's work unit",
    "description": "Permission to Update a plan",
    "target": "action == 'UPDATE_PLAN'",
    "condition": "subject.belongsToAnyWorkUnit(resource.workUnit)"
  },
  {
    "name": "Read public projects.",
    "description": "A project that is public can be read by anyone.",
    "target": "action == 'READ_PROJECT'",
    "condition": "resource.resourcePrivacy.name() == 'PUBLIC'"
  },
  {
    "name": "Read protected projects if user logged into the system.",
    "description": "A project that is protected can be read by anyone logged into the system.",
    "target": "action == 'READ_PROJECT'",
    "condition": "resource.resourcePrivacy.name() == 'PROTECTED' && subject.name != 'anonymousUser'"
  },
  {
    "name": "Read projects in related consortia.",
    "description": "A user can read a project that is related to a consortium where the user is a member of that consortium.",
    "target": "action == 'READ_PROJECT'",
    "condition": "subject.belongsToConsortia(resource.getRelatedConsortia())"
  },
  {
    "name": "Read projects associated plans.",
    "description": "A user can read a project if they have plans associated with it.",
    "target": "action == 'READ_PROJECT'",
    "condition": "subject.belongsToAnyWorkUnit(resource.getRelatedWorkUnits())"
  },
  {
    "name": "Modify associated projects",
    "description": "A user can modify a project if they have plans associated with it.",
    "target": "action == 'UPDATE_PROJECT'",
    "condition": "subject.belongsToAnyWorkUnit(resource.getRelatedWorkUnits())"
  },
  {
    "name": "Read public outcomes.",
    "description": "An outcome that is public can be read by anyone.",
    "target": "action == 'READ_OUTCOME'",
    "condition": "resource.resourcePrivacy.name() == 'PUBLIC'"
  },
  {
    "name": "Read protected outcome if user logged into the system.",
    "description": "An outcome that is protected can be read by anyone logged into the system.",
    "target": "action == 'READ_OUTCOME'",
    "condition": "resource.resourcePrivacy.name() == 'PROTECTED' && subject.name != 'anonymousUser'"
  },
  {
    "name": "Read outcome in related consortia.",
    "description": "A user can read a project that is related to a consortium where the user is a member of that consortium.",
    "target": "action == 'READ_OUTCOME'",
    "condition": "subject.belongsToConsortia( subject.getRelatedWorkUnitsByUserMail(resource.getCreatedBy()))"
  },
  {
    "name": "Manage target gene lists",
    "description": "A user can manage target gene lists if they are manager in any consortium",
    "target": "action == 'MANAGE_GENE_LISTS'",
    "condition": "subject.whereUserHasRole('manager').getConsortia().size() > 0"
  },

  {
    "name": "Reverse Genotype Confirmation",
    "description": "CDA and DCC can move a colony from Genotype Confirmed to Genotype Not Confirmed",
    "target": "action == 'REVERSE_GENOTYPE_CONFIRMATION'",
    "condition": "subject.isUserByKey('cda_user_key') OR subject.isUserByKey('dcc_user_key')"
  },
  {
    "name": "Update to Phenotyping Started",
    "description": "DCC can update a phenotyping stage to Phenotyping Started",
    "target": "action == 'UPDATE_TO_PHENOTYPING_STARTED'",
    "condition": "subject.isUserByKey('dcc_user_key')"
  },
  {
    "name": "Update from All Data Sent to All Data Processed",
    "description": "DCC can update a phenotyping stage from All Data Sent to All Data Processed",
    "target": "action == 'UPDATE_FROM_ALL_DATA_SENT_TO_ALL_DATA_PROCESSED'",
    "condition": "subject.isUserByKey('dcc_user_key')"
  },
  {
    "name": "Reverse from All Data Processed to All Data Sent",
    "description": "DCC can reverse a phenotyping stage from All Data Processed to All Data Sent",
    "target": "action == 'REVERSE_FROM_ALL_DATA_PROCESSED_TO_ALL_DATA_SENT'",
    "condition": "subject.isUserByKey('dcc_user_key')"
  },
  {
    "name": "Update from All Data Processed to Phenotyping Finished",
    "description": "CDA can update a phenotyping stage from All Data Processed to Phenotyping Finished",
    "target": "action == 'UPDATE_FROM_ALL_DATA_PROCESSED_TO_PHENOTYPING_FINISHED'",
    "condition": "subject.isUserByKey('cda_user_key')"
  },
  {
    "name": "Reverse from Phenotyping Finished to All Data Processed",
    "description": "DCC or CDA can update a phenotyping stage from Phenotyping Finished to All Data Processed",
    "target": "action == 'REVERSE_FROM_PHENOTYPING_FINISHED_TO_ALL_DATA_PROCESSED'",
    "condition": "subject.isUserByKey('cda_user_key') OR subject.isUserByKey('dcc_user_key')"
  }
]